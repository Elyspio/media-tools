/* tslint:disable */
/* eslint-disable */
/**
 * Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, { AxiosInstance, AxiosPromise, AxiosRequestConfig } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
	assertParamExists,
	createRequestFunction,
	DUMMY_BASE_URL,
	serializeDataIfNeeded,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	toPathString,
} from "./common";
// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError } from "./base";

/**
 *
 * @export
 * @enum {string}
 */

export const AppArch = {
	Win32: "Win32",
	Win64: "Win64",
	LinuxDeb: "LinuxDeb",
	LinuxRpm: "LinuxRpm",
	LinuxSnap: "LinuxSnap",
} as const;

export type AppArch = typeof AppArch[keyof typeof AppArch];

/**
 *
 * @export
 * @interface AppMetadata
 */
export interface AppMetadata {
	/**
	 *
	 * @type {string}
	 * @memberof AppMetadata
	 */
	name: string;
	/**
	 *
	 * @type {AppVersion}
	 * @memberof AppMetadata
	 */
	version: AppVersion;
	/**
	 *
	 * @type {AppArch}
	 * @memberof AppMetadata
	 */
	arch: AppArch;
}

/**
 *
 * @export
 * @interface AppVersion
 */
export interface AppVersion {
	/**
	 *
	 * @type {number}
	 * @memberof AppVersion
	 */
	minor: number;
	/**
	 *
	 * @type {number}
	 * @memberof AppVersion
	 */
	major: number;
	/**
	 *
	 * @type {number}
	 * @memberof AppVersion
	 */
	revision: number;
	/**
	 *
	 * @type {string}
	 * @memberof AppVersion
	 */
	raw: string;
}

/**
 * AppsApi - axios parameter creator
 * @export
 */
export const AppsApiAxiosParamCreator = function(configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {string} name
		 * @param {string} version
		 * @param {AppArch} arch
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		_delete: async (name: string, version: string, arch: AppArch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'name' is not null or undefined
			assertParamExists("_delete", "name", name);
			// verify required parameter 'version' is not null or undefined
			assertParamExists("_delete", "version", version);
			// verify required parameter 'arch' is not null or undefined
			assertParamExists("_delete", "arch", arch);
			const localVarPath = `/api/apps/{name}/{arch}/{version}`
				.replace(`{${"name"}}`, encodeURIComponent(String(name)))
				.replace(`{${"version"}}`, encodeURIComponent(String(version)))
				.replace(`{${"arch"}}`, encodeURIComponent(String(arch)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} name
		 * @param {string} version
		 * @param {AppArch} arch
		 * @param {string} body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		add: async (name: string, version: string, arch: AppArch, body: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'name' is not null or undefined
			assertParamExists("add", "name", name);
			// verify required parameter 'version' is not null or undefined
			assertParamExists("add", "version", version);
			// verify required parameter 'arch' is not null or undefined
			assertParamExists("add", "arch", arch);
			// verify required parameter 'body' is not null or undefined
			assertParamExists("add", "body", body);
			const localVarPath = `/api/apps/{name}/{arch}/{version}`
				.replace(`{${"name"}}`, encodeURIComponent(String(name)))
				.replace(`{${"version"}}`, encodeURIComponent(String(version)))
				.replace(`{${"arch"}}`, encodeURIComponent(String(arch)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllMetadata: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'name' is not null or undefined
			assertParamExists("getAllMetadata", "name", name);
			const localVarPath = `/api/apps/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(name)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getApps: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/apps`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} name
		 * @param {string} version
		 * @param {AppArch} arch
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getBinary: async (name: string, version: string, arch: AppArch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'name' is not null or undefined
			assertParamExists("getBinary", "name", name);
			// verify required parameter 'version' is not null or undefined
			assertParamExists("getBinary", "version", version);
			// verify required parameter 'arch' is not null or undefined
			assertParamExists("getBinary", "arch", arch);
			const localVarPath = `/api/apps/{name}/{arch}/{version}`
				.replace(`{${"name"}}`, encodeURIComponent(String(name)))
				.replace(`{${"version"}}`, encodeURIComponent(String(version)))
				.replace(`{${"arch"}}`, encodeURIComponent(String(arch)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} name
		 * @param {AppArch} arch
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getLatestArchSpecificVersion: async (name: string, arch: AppArch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'name' is not null or undefined
			assertParamExists("getLatestArchSpecificVersion", "name", name);
			// verify required parameter 'arch' is not null or undefined
			assertParamExists("getLatestArchSpecificVersion", "arch", arch);
			const localVarPath = `/api/apps/{name}/{arch}/version`
				.replace(`{${"name"}}`, encodeURIComponent(String(name)))
				.replace(`{${"arch"}}`, encodeURIComponent(String(arch)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getLatestVersions: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'name' is not null or undefined
			assertParamExists("getLatestVersions", "name", name);
			const localVarPath = `/api/apps/{name}/version`.replace(`{${"name"}}`, encodeURIComponent(String(name)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * AppsApi - functional programming interface
 * @export
 */
export const AppsApiFp = function(configuration?: Configuration) {
	const localVarAxiosParamCreator = AppsApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {string} name
		 * @param {string} version
		 * @param {AppArch} arch
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async _delete(name: string, version: string, arch: AppArch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator._delete(name, version, arch, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} name
		 * @param {string} version
		 * @param {AppArch} arch
		 * @param {string} body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async add(
			name: string,
			version: string,
			arch: AppArch,
			body: string,
			options?: AxiosRequestConfig,
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.add(name, version, arch, body, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllMetadata(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppMetadata>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMetadata(name, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getApps(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getApps(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} name
		 * @param {string} version
		 * @param {AppArch} arch
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getBinary(name: string, version: string, arch: AppArch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getBinary(name, version, arch, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} name
		 * @param {AppArch} arch
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getLatestArchSpecificVersion(
			name: string,
			arch: AppArch,
			options?: AxiosRequestConfig,
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppVersion>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getLatestArchSpecificVersion(name, arch, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getLatestVersions(
			name: string,
			options?: AxiosRequestConfig,
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<AppVersion> }>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getLatestVersions(name, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * AppsApi - factory interface
 * @export
 */
export const AppsApiFactory = function(configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = AppsApiFp(configuration);
	return {
		/**
		 *
		 * @param {string} name
		 * @param {string} version
		 * @param {AppArch} arch
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		_delete(name: string, version: string, arch: AppArch, options?: any): AxiosPromise<void> {
			return localVarFp._delete(name, version, arch, options).then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} name
		 * @param {string} version
		 * @param {AppArch} arch
		 * @param {string} body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		add(name: string, version: string, arch: AppArch, body: string, options?: any): AxiosPromise<void> {
			return localVarFp.add(name, version, arch, body, options).then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllMetadata(name: string, options?: any): AxiosPromise<Array<AppMetadata>> {
			return localVarFp.getAllMetadata(name, options).then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getApps(options?: any): AxiosPromise<Array<string>> {
			return localVarFp.getApps(options).then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} name
		 * @param {string} version
		 * @param {AppArch} arch
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getBinary(name: string, version: string, arch: AppArch, options?: any): AxiosPromise<object> {
			return localVarFp.getBinary(name, version, arch, options).then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} name
		 * @param {AppArch} arch
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getLatestArchSpecificVersion(name: string, arch: AppArch, options?: any): AxiosPromise<AppVersion> {
			return localVarFp.getLatestArchSpecificVersion(name, arch, options).then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getLatestVersions(name: string, options?: any): AxiosPromise<{ [key: string]: Array<AppVersion> }> {
			return localVarFp.getLatestVersions(name, options).then(request => request(axios, basePath));
		},
	};
};

/**
 * AppsApi - object-oriented interface
 * @export
 * @class AppsApi
 * @extends {BaseAPI}
 */
export class AppsApi extends BaseAPI {
	/**
	 *
	 * @param {string} name
	 * @param {string} version
	 * @param {AppArch} arch
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AppsApi
	 */
	public _delete(name: string, version: string, arch: AppArch, options?: AxiosRequestConfig) {
		return AppsApiFp(this.configuration)
			._delete(name, version, arch, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} name
	 * @param {string} version
	 * @param {AppArch} arch
	 * @param {string} body
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AppsApi
	 */
	public add(name: string, version: string, arch: AppArch, body: string, options?: AxiosRequestConfig) {
		return AppsApiFp(this.configuration)
			.add(name, version, arch, body, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} name
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AppsApi
	 */
	public getAllMetadata(name: string, options?: AxiosRequestConfig) {
		return AppsApiFp(this.configuration)
			.getAllMetadata(name, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AppsApi
	 */
	public getApps(options?: AxiosRequestConfig) {
		return AppsApiFp(this.configuration)
			.getApps(options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} name
	 * @param {string} version
	 * @param {AppArch} arch
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AppsApi
	 */
	public getBinary(name: string, version: string, arch: AppArch, options?: AxiosRequestConfig) {
		return AppsApiFp(this.configuration)
			.getBinary(name, version, arch, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} name
	 * @param {AppArch} arch
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AppsApi
	 */
	public getLatestArchSpecificVersion(name: string, arch: AppArch, options?: AxiosRequestConfig) {
		return AppsApiFp(this.configuration)
			.getLatestArchSpecificVersion(name, arch, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} name
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AppsApi
	 */
	public getLatestVersions(name: string, options?: AxiosRequestConfig) {
		return AppsApiFp(this.configuration)
			.getLatestVersions(name, options)
			.then(request => request(this.axios, this.basePath));
	}
}
